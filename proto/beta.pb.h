// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beta.proto

#ifndef PROTOBUF_INCLUDED_beta_2eproto
#define PROTOBUF_INCLUDED_beta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_beta_2eproto 

namespace protobuf_beta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_beta_2eproto
namespace Beta {
class Parameters;
class ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
}  // namespace Beta
namespace google {
namespace protobuf {
template<> ::Beta::Parameters* Arena::CreateMaybeMessage<::Beta::Parameters>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Beta {

// ===================================================================

class Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Beta.Parameters) */ {
 public:
  Parameters();
  virtual ~Parameters();

  Parameters(const Parameters& from);

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Parameters* other);
  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameters* New() const final {
    return CreateMaybeMessage<Parameters>(NULL);
  }

  Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 2 [default = "chess"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required int32 num_thread = 10 [default = 1];
  bool has_num_thread() const;
  void clear_num_thread();
  static const int kNumThreadFieldNumber = 10;
  ::google::protobuf::int32 num_thread() const;
  void set_num_thread(::google::protobuf::int32 value);

  // required int32 L = 1 [default = 1];
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 1;
  ::google::protobuf::int32 l() const;
  void set_l(::google::protobuf::int32 value);

  // required int32 batch_size = 3 [default = 10];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // required int32 channel = 4 [default = 8];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // required int32 board_size = 5 [default = 10];
  bool has_board_size() const;
  void clear_board_size();
  static const int kBoardSizeFieldNumber = 5;
  ::google::protobuf::int32 board_size() const;
  void set_board_size(::google::protobuf::int32 value);

  // required float epsilon = 6 [default = 0.25];
  bool has_epsilon() const;
  void clear_epsilon();
  static const int kEpsilonFieldNumber = 6;
  float epsilon() const;
  void set_epsilon(float value);

  // required int32 num_simulation = 7 [default = 1];
  bool has_num_simulation() const;
  void clear_num_simulation();
  static const int kNumSimulationFieldNumber = 7;
  ::google::protobuf::int32 num_simulation() const;
  void set_num_simulation(::google::protobuf::int32 value);

  // required float tau = 8 [default = 0.1];
  bool has_tau() const;
  void clear_tau();
  static const int kTauFieldNumber = 8;
  float tau() const;
  void set_tau(float value);

  // required float v_resign = 9 [default = 0.1];
  bool has_v_resign() const;
  void clear_v_resign();
  static const int kVResignFieldNumber = 9;
  float v_resign() const;
  void set_v_resign(float value);

  // @@protoc_insertion_point(class_scope:Beta.Parameters)
 private:
  void set_has_l();
  void clear_has_l();
  void set_has_type();
  void clear_has_type();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channel();
  void clear_has_channel();
  void set_has_board_size();
  void clear_has_board_size();
  void set_has_epsilon();
  void clear_has_epsilon();
  void set_has_num_simulation();
  void clear_has_num_simulation();
  void set_has_tau();
  void clear_has_tau();
  void set_has_v_resign();
  void clear_has_v_resign();
  void set_has_num_thread();
  void clear_has_num_thread();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 num_thread_;
  ::google::protobuf::int32 l_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 board_size_;
  float epsilon_;
  ::google::protobuf::int32 num_simulation_;
  float tau_;
  float v_resign_;
  friend struct ::protobuf_beta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameters

// required int32 L = 1 [default = 1];
inline bool Parameters::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameters::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameters::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameters::clear_l() {
  l_ = 1;
  clear_has_l();
}
inline ::google::protobuf::int32 Parameters::l() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.L)
  return l_;
}
inline void Parameters::set_l(::google::protobuf::int32 value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.L)
}

// required string type = 2 [default = "chess"];
inline bool Parameters::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameters::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameters::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameters::clear_type() {
  type_.ClearToDefaultNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Parameters::type() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.type)
  return type_.GetNoArena();
}
inline void Parameters::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:Beta.Parameters.type)
}
#if LANG_CXX11
inline void Parameters::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beta.Parameters.type)
}
#endif
inline void Parameters::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beta.Parameters.type)
}
inline void Parameters::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beta.Parameters.type)
}
inline ::std::string* Parameters::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:Beta.Parameters.type)
  return type_.MutableNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* Parameters::release_type() {
  // @@protoc_insertion_point(field_release:Beta.Parameters.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void Parameters::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::Beta::Parameters::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:Beta.Parameters.type)
}

// required int32 batch_size = 3 [default = 10];
inline bool Parameters::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameters::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameters::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameters::clear_batch_size() {
  batch_size_ = 10;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 Parameters::batch_size() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.batch_size)
  return batch_size_;
}
inline void Parameters::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.batch_size)
}

// required int32 channel = 4 [default = 8];
inline bool Parameters::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameters::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameters::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameters::clear_channel() {
  channel_ = 8;
  clear_has_channel();
}
inline ::google::protobuf::int32 Parameters::channel() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.channel)
  return channel_;
}
inline void Parameters::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.channel)
}

// required int32 board_size = 5 [default = 10];
inline bool Parameters::has_board_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Parameters::set_has_board_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Parameters::clear_has_board_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Parameters::clear_board_size() {
  board_size_ = 10;
  clear_has_board_size();
}
inline ::google::protobuf::int32 Parameters::board_size() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.board_size)
  return board_size_;
}
inline void Parameters::set_board_size(::google::protobuf::int32 value) {
  set_has_board_size();
  board_size_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.board_size)
}

// required float epsilon = 6 [default = 0.25];
inline bool Parameters::has_epsilon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Parameters::set_has_epsilon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Parameters::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Parameters::clear_epsilon() {
  epsilon_ = 0.25f;
  clear_has_epsilon();
}
inline float Parameters::epsilon() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.epsilon)
  return epsilon_;
}
inline void Parameters::set_epsilon(float value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.epsilon)
}

// required int32 num_simulation = 7 [default = 1];
inline bool Parameters::has_num_simulation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Parameters::set_has_num_simulation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Parameters::clear_has_num_simulation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Parameters::clear_num_simulation() {
  num_simulation_ = 1;
  clear_has_num_simulation();
}
inline ::google::protobuf::int32 Parameters::num_simulation() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.num_simulation)
  return num_simulation_;
}
inline void Parameters::set_num_simulation(::google::protobuf::int32 value) {
  set_has_num_simulation();
  num_simulation_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.num_simulation)
}

// required float tau = 8 [default = 0.1];
inline bool Parameters::has_tau() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Parameters::set_has_tau() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Parameters::clear_has_tau() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Parameters::clear_tau() {
  tau_ = 0.1f;
  clear_has_tau();
}
inline float Parameters::tau() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.tau)
  return tau_;
}
inline void Parameters::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.tau)
}

// required float v_resign = 9 [default = 0.1];
inline bool Parameters::has_v_resign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Parameters::set_has_v_resign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Parameters::clear_has_v_resign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Parameters::clear_v_resign() {
  v_resign_ = 0.1f;
  clear_has_v_resign();
}
inline float Parameters::v_resign() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.v_resign)
  return v_resign_;
}
inline void Parameters::set_v_resign(float value) {
  set_has_v_resign();
  v_resign_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.v_resign)
}

// required int32 num_thread = 10 [default = 1];
inline bool Parameters::has_num_thread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameters::set_has_num_thread() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameters::clear_has_num_thread() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameters::clear_num_thread() {
  num_thread_ = 1;
  clear_has_num_thread();
}
inline ::google::protobuf::int32 Parameters::num_thread() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.num_thread)
  return num_thread_;
}
inline void Parameters::set_num_thread(::google::protobuf::int32 value) {
  set_has_num_thread();
  num_thread_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.num_thread)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Beta

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_beta_2eproto
