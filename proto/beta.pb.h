// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beta.proto

#ifndef PROTOBUF_beta_2eproto__INCLUDED
#define PROTOBUF_beta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Beta {
class Parameters;
class ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
}  // namespace Beta

namespace Beta {

namespace protobuf_beta_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_beta_2eproto

// ===================================================================

class Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Beta.Parameters) */ {
 public:
  Parameters();
  virtual ~Parameters();

  Parameters(const Parameters& from);

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameters& default_instance();

  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Parameters* other);

  // implements Message ----------------------------------------------

  inline Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 2 [default = "chess"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required int32 depth = 1 [default = 1];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 batch_size = 3 [default = 10];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // required int32 channel = 4 [default = 8];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // required int32 height = 5 [default = 10];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required int32 width = 6 [default = 9];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required float epsilon = 7 [default = 0.25];
  bool has_epsilon() const;
  void clear_epsilon();
  static const int kEpsilonFieldNumber = 7;
  float epsilon() const;
  void set_epsilon(float value);

  // @@protoc_insertion_point(class_scope:Beta.Parameters)
 private:
  void set_has_depth();
  void clear_has_depth();
  void set_has_type();
  void clear_has_type();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channel();
  void clear_has_channel();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_epsilon();
  void clear_has_epsilon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  float epsilon_;
  friend struct protobuf_beta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameters

// required int32 depth = 1 [default = 1];
inline bool Parameters::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameters::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameters::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameters::clear_depth() {
  depth_ = 1;
  clear_has_depth();
}
inline ::google::protobuf::int32 Parameters::depth() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.depth)
  return depth_;
}
inline void Parameters::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.depth)
}

// required string type = 2 [default = "chess"];
inline bool Parameters::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameters::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameters::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameters::clear_type() {
  type_.ClearToDefaultNoArena(&Parameters::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& Parameters::type() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.type)
  return type_.GetNoArena();
}
inline void Parameters::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:Beta.Parameters.type)
}
#if LANG_CXX11
inline void Parameters::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &Parameters::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beta.Parameters.type)
}
#endif
inline void Parameters::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beta.Parameters.type)
}
inline void Parameters::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beta.Parameters.type)
}
inline ::std::string* Parameters::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:Beta.Parameters.type)
  return type_.MutableNoArena(&Parameters::_default_type_.get());
}
inline ::std::string* Parameters::release_type() {
  // @@protoc_insertion_point(field_release:Beta.Parameters.type)
  clear_has_type();
  return type_.ReleaseNoArena(&Parameters::_default_type_.get());
}
inline void Parameters::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&Parameters::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:Beta.Parameters.type)
}

// required int32 batch_size = 3 [default = 10];
inline bool Parameters::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameters::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameters::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameters::clear_batch_size() {
  batch_size_ = 10;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 Parameters::batch_size() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.batch_size)
  return batch_size_;
}
inline void Parameters::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.batch_size)
}

// required int32 channel = 4 [default = 8];
inline bool Parameters::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameters::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameters::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameters::clear_channel() {
  channel_ = 8;
  clear_has_channel();
}
inline ::google::protobuf::int32 Parameters::channel() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.channel)
  return channel_;
}
inline void Parameters::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.channel)
}

// required int32 height = 5 [default = 10];
inline bool Parameters::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameters::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameters::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameters::clear_height() {
  height_ = 10;
  clear_has_height();
}
inline ::google::protobuf::int32 Parameters::height() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.height)
  return height_;
}
inline void Parameters::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.height)
}

// required int32 width = 6 [default = 9];
inline bool Parameters::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Parameters::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Parameters::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Parameters::clear_width() {
  width_ = 9;
  clear_has_width();
}
inline ::google::protobuf::int32 Parameters::width() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.width)
  return width_;
}
inline void Parameters::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.width)
}

// required float epsilon = 7 [default = 0.25];
inline bool Parameters::has_epsilon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Parameters::set_has_epsilon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Parameters::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Parameters::clear_epsilon() {
  epsilon_ = 0.25f;
  clear_has_epsilon();
}
inline float Parameters::epsilon() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.epsilon)
  return epsilon_;
}
inline void Parameters::set_epsilon(float value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.epsilon)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Beta

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_beta_2eproto__INCLUDED
