// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "beta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Beta {
class ParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Parameters> {
} _Parameters_default_instance_;

namespace protobuf_beta_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, board_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, epsilon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, num_simulation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, tau_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, v_resign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, num_thread_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 15, sizeof(Parameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Parameters_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "beta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Parameters_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  Parameters::_default_type_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  Parameters::_default_type_.DefaultConstruct();
  *Parameters::_default_type_.get_mutable() = ::std::string("chess", 5);
  _Parameters_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nbeta.proto\022\004Beta\"\345\001\n\nParameters\022\014\n\001L\030\001"
      " \002(\005:\0011\022\023\n\004type\030\002 \002(\t:\005chess\022\026\n\nbatch_si"
      "ze\030\003 \002(\005:\00210\022\022\n\007channel\030\004 \002(\005:\0018\022\026\n\nboar"
      "d_size\030\005 \002(\005:\00210\022\025\n\007epsilon\030\006 \002(\002:\0040.25\022"
      "\031\n\016num_simulation\030\007 \002(\005:\0011\022\020\n\003tau\030\010 \002(\002:"
      "\0030.1\022\025\n\010v_resign\030\t \002(\002:\0030.1\022\025\n\nnum_threa"
      "d\030\n \002(\005:\0011"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "beta.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_beta_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> Parameters::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameters::kLFieldNumber;
const int Parameters::kTypeFieldNumber;
const int Parameters::kBatchSizeFieldNumber;
const int Parameters::kChannelFieldNumber;
const int Parameters::kBoardSizeFieldNumber;
const int Parameters::kEpsilonFieldNumber;
const int Parameters::kNumSimulationFieldNumber;
const int Parameters::kTauFieldNumber;
const int Parameters::kVResignFieldNumber;
const int Parameters::kNumThreadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameters::Parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_beta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beta.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&Parameters::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&Parameters::_default_type_.get(), from.type_);
  }
  ::memcpy(&num_thread_, &from.num_thread_,
    reinterpret_cast<char*>(&v_resign_) -
    reinterpret_cast<char*>(&num_thread_) + sizeof(v_resign_));
  // @@protoc_insertion_point(copy_constructor:Beta.Parameters)
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&Parameters::_default_type_.get());
  num_thread_ = 1;
  l_ = 1;
  batch_size_ = 10;
  channel_ = 8;
  board_size_ = 10;
  epsilon_ = 0.25f;
  num_simulation_ = 1;
  tau_ = 0.1f;
  v_resign_ = 0.1f;
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:Beta.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  type_.DestroyNoArena(&Parameters::_default_type_.get());
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameters& Parameters::default_instance() {
  protobuf_beta_2eproto::InitDefaults();
  return *internal_default_instance();
}

Parameters* Parameters::New(::google::protobuf::Arena* arena) const {
  Parameters* n = new Parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:Beta.Parameters)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&Parameters::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&Parameters::_default_type_.get());
    }
    num_thread_ = 1;
    l_ = 1;
    batch_size_ = 10;
    channel_ = 8;
    board_size_ = 10;
    epsilon_ = 0.25f;
    num_simulation_ = 1;
  }
  if (_has_bits_[8 / 32] & 768u) {
    tau_ = 0.1f;
    v_resign_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beta.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 L = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2 [default = "chess"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Beta.Parameters.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 batch_size = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 channel = 4 [default = 8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 board_size = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_board_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float epsilon = 6 [default = 0.25];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_epsilon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_simulation = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_num_simulation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_simulation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tau = 8 [default = 0.1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_tau();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float v_resign = 9 [default = 0.1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_v_resign();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_resign_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_thread = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_num_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beta.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beta.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beta.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 L = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->l(), output);
  }

  // required string type = 2 [default = "chess"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beta.Parameters.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required int32 batch_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batch_size(), output);
  }

  // required int32 channel = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  // required int32 board_size = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->board_size(), output);
  }

  // required float epsilon = 6 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->epsilon(), output);
  }

  // required int32 num_simulation = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_simulation(), output);
  }

  // required float tau = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tau(), output);
  }

  // required float v_resign = 9 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->v_resign(), output);
  }

  // required int32 num_thread = 10 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_thread(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Beta.Parameters)
}

::google::protobuf::uint8* Parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Beta.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 L = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->l(), target);
  }

  // required string type = 2 [default = "chess"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Beta.Parameters.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 batch_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batch_size(), target);
  }

  // required int32 channel = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  // required int32 board_size = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->board_size(), target);
  }

  // required float epsilon = 6 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->epsilon(), target);
  }

  // required int32 num_simulation = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_simulation(), target);
  }

  // required float tau = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tau(), target);
  }

  // required float v_resign = 9 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->v_resign(), target);
  }

  // required int32 num_thread = 10 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_thread(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Beta.Parameters)
  return target;
}

size_t Parameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Beta.Parameters)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 2 [default = "chess"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_num_thread()) {
    // required int32 num_thread = 10 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_thread());
  }

  if (has_l()) {
    // required int32 L = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->l());
  }

  if (has_batch_size()) {
    // required int32 batch_size = 3 [default = 10];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  if (has_channel()) {
    // required int32 channel = 4 [default = 8];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  if (has_board_size()) {
    // required int32 board_size = 5 [default = 10];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->board_size());
  }

  if (has_epsilon()) {
    // required float epsilon = 6 [default = 0.25];
    total_size += 1 + 4;
  }

  if (has_num_simulation()) {
    // required int32 num_simulation = 7 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_simulation());
  }

  if (has_tau()) {
    // required float tau = 8 [default = 0.1];
    total_size += 1 + 4;
  }

  if (has_v_resign()) {
    // required float v_resign = 9 [default = 0.1];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Beta.Parameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string type = 2 [default = "chess"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int32 num_thread = 10 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_thread());

    // required int32 L = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->l());

    // required int32 batch_size = 3 [default = 10];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());

    // required int32 channel = 4 [default = 8];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());

    // required int32 board_size = 5 [default = 10];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->board_size());

    // required float epsilon = 6 [default = 0.25];
    total_size += 1 + 4;

    // required int32 num_simulation = 7 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_simulation());

    // required float tau = 8 [default = 0.1];
    total_size += 1 + 4;

    // required float v_resign = 9 [default = 0.1];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Beta.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Beta.Parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Beta.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Beta.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&Parameters::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_thread_ = from.num_thread_;
    }
    if (cached_has_bits & 0x00000004u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      board_size_ = from.board_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      epsilon_ = from.epsilon_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_simulation_ = from.num_simulation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      tau_ = from.tau_;
    }
    if (cached_has_bits & 0x00000200u) {
      v_resign_ = from.v_resign_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Beta.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Beta.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameters::InternalSwap(Parameters* other) {
  type_.Swap(&other->type_);
  std::swap(num_thread_, other->num_thread_);
  std::swap(l_, other->l_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(channel_, other->channel_);
  std::swap(board_size_, other->board_size_);
  std::swap(epsilon_, other->epsilon_);
  std::swap(num_simulation_, other->num_simulation_);
  std::swap(tau_, other->tau_);
  std::swap(v_resign_, other->v_resign_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_beta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_beta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameters

// required int32 L = 1 [default = 1];
bool Parameters::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Parameters::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
void Parameters::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void Parameters::clear_l() {
  l_ = 1;
  clear_has_l();
}
::google::protobuf::int32 Parameters::l() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.L)
  return l_;
}
void Parameters::set_l(::google::protobuf::int32 value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.L)
}

// required string type = 2 [default = "chess"];
bool Parameters::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Parameters::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Parameters::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Parameters::clear_type() {
  type_.ClearToDefaultNoArena(&Parameters::_default_type_.get());
  clear_has_type();
}
const ::std::string& Parameters::type() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.type)
  return type_.GetNoArena();
}
void Parameters::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:Beta.Parameters.type)
}
#if LANG_CXX11
void Parameters::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &Parameters::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beta.Parameters.type)
}
#endif
void Parameters::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beta.Parameters.type)
}
void Parameters::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&Parameters::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beta.Parameters.type)
}
::std::string* Parameters::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:Beta.Parameters.type)
  return type_.MutableNoArena(&Parameters::_default_type_.get());
}
::std::string* Parameters::release_type() {
  // @@protoc_insertion_point(field_release:Beta.Parameters.type)
  clear_has_type();
  return type_.ReleaseNoArena(&Parameters::_default_type_.get());
}
void Parameters::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&Parameters::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:Beta.Parameters.type)
}

// required int32 batch_size = 3 [default = 10];
bool Parameters::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Parameters::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Parameters::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Parameters::clear_batch_size() {
  batch_size_ = 10;
  clear_has_batch_size();
}
::google::protobuf::int32 Parameters::batch_size() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.batch_size)
  return batch_size_;
}
void Parameters::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.batch_size)
}

// required int32 channel = 4 [default = 8];
bool Parameters::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Parameters::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void Parameters::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void Parameters::clear_channel() {
  channel_ = 8;
  clear_has_channel();
}
::google::protobuf::int32 Parameters::channel() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.channel)
  return channel_;
}
void Parameters::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.channel)
}

// required int32 board_size = 5 [default = 10];
bool Parameters::has_board_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Parameters::set_has_board_size() {
  _has_bits_[0] |= 0x00000020u;
}
void Parameters::clear_has_board_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void Parameters::clear_board_size() {
  board_size_ = 10;
  clear_has_board_size();
}
::google::protobuf::int32 Parameters::board_size() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.board_size)
  return board_size_;
}
void Parameters::set_board_size(::google::protobuf::int32 value) {
  set_has_board_size();
  board_size_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.board_size)
}

// required float epsilon = 6 [default = 0.25];
bool Parameters::has_epsilon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Parameters::set_has_epsilon() {
  _has_bits_[0] |= 0x00000040u;
}
void Parameters::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000040u;
}
void Parameters::clear_epsilon() {
  epsilon_ = 0.25f;
  clear_has_epsilon();
}
float Parameters::epsilon() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.epsilon)
  return epsilon_;
}
void Parameters::set_epsilon(float value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.epsilon)
}

// required int32 num_simulation = 7 [default = 1];
bool Parameters::has_num_simulation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Parameters::set_has_num_simulation() {
  _has_bits_[0] |= 0x00000080u;
}
void Parameters::clear_has_num_simulation() {
  _has_bits_[0] &= ~0x00000080u;
}
void Parameters::clear_num_simulation() {
  num_simulation_ = 1;
  clear_has_num_simulation();
}
::google::protobuf::int32 Parameters::num_simulation() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.num_simulation)
  return num_simulation_;
}
void Parameters::set_num_simulation(::google::protobuf::int32 value) {
  set_has_num_simulation();
  num_simulation_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.num_simulation)
}

// required float tau = 8 [default = 0.1];
bool Parameters::has_tau() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Parameters::set_has_tau() {
  _has_bits_[0] |= 0x00000100u;
}
void Parameters::clear_has_tau() {
  _has_bits_[0] &= ~0x00000100u;
}
void Parameters::clear_tau() {
  tau_ = 0.1f;
  clear_has_tau();
}
float Parameters::tau() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.tau)
  return tau_;
}
void Parameters::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.tau)
}

// required float v_resign = 9 [default = 0.1];
bool Parameters::has_v_resign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Parameters::set_has_v_resign() {
  _has_bits_[0] |= 0x00000200u;
}
void Parameters::clear_has_v_resign() {
  _has_bits_[0] &= ~0x00000200u;
}
void Parameters::clear_v_resign() {
  v_resign_ = 0.1f;
  clear_has_v_resign();
}
float Parameters::v_resign() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.v_resign)
  return v_resign_;
}
void Parameters::set_v_resign(float value) {
  set_has_v_resign();
  v_resign_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.v_resign)
}

// required int32 num_thread = 10 [default = 1];
bool Parameters::has_num_thread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Parameters::set_has_num_thread() {
  _has_bits_[0] |= 0x00000002u;
}
void Parameters::clear_has_num_thread() {
  _has_bits_[0] &= ~0x00000002u;
}
void Parameters::clear_num_thread() {
  num_thread_ = 1;
  clear_has_num_thread();
}
::google::protobuf::int32 Parameters::num_thread() const {
  // @@protoc_insertion_point(field_get:Beta.Parameters.num_thread)
  return num_thread_;
}
void Parameters::set_num_thread(::google::protobuf::int32 value) {
  set_has_num_thread();
  num_thread_ = value;
  // @@protoc_insertion_point(field_set:Beta.Parameters.num_thread)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Beta

// @@protoc_insertion_point(global_scope)
